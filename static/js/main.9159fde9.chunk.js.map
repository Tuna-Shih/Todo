{"version":3,"sources":["TodoItem.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","add","bind","handle","e","handleChange","this","addTodo","todoText","className","type","value","onChange","placeholder","onClick","React","Component","Todo","delete","id","todo","deleteTodo","text","App","state","todos","todoData","document","cookie","oldTodos","JSON","parse","setState","prevState","stringify","filter","target","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAqCeA,G,wDAlCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,IAAM,EAAKA,IAAIC,KAAT,gBACX,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBAHG,E,mDAMZE,IAELC,EADyBC,KAAKN,MAAtBK,cACKD,K,6BAKbG,EADoBD,KAAKN,MAAjBO,a,+BAIA,IACAC,EAAaF,KAAKN,MAAlBQ,SACR,OACE,yBAAKC,UAAU,YACb,2BACEC,KAAK,OACLC,MAAOH,EACPI,SAAUN,KAAKH,OACfU,YAAY,kBAEd,4BAAQJ,UAAU,WAAWK,QAASR,KAAKL,KAA3C,Y,GA3Bec,IAAMC,YC0BdC,E,kDAzBb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDkB,OAAS,EAAKA,OAAOhB,KAAZ,gBAFG,E,mDAKZiB,GAAK,IAAD,EACoBb,KAAKN,MAA1BoB,EADC,EACDA,MACRC,EAFS,EACKA,YACHD,EAAKD,M,+BAGR,IACAC,EAASd,KAAKN,MAAdoB,KACR,OACE,yBAAKX,UAAU,aACb,yBAAKA,UAAU,sBAAsBW,EAAKE,MAC1C,yBAAKb,UAAU,oBACb,4BAAQA,UAAU,SAASK,QAASR,KAAKY,QAAzC,gB,GAjBSH,IAAMC,WC2EVO,E,kDAvEb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IACDwB,MAAQ,CACXC,MAAO,GACPjB,SAAU,IAEZ,EAAKW,GAAK,EAEV,EAAKZ,QAAU,EAAKA,QAAQL,KAAb,gBACf,EAAKmB,WAAa,EAAKA,WAAWnB,KAAhB,gBAClB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBAVH,E,gEAcjB,IAAMwB,EAAWC,SAASC,OAC1B,GAAIF,EAAU,CACZ,IAAMG,EAAWC,KAAKC,MAAML,GAC5BpB,KAAK0B,SAAS,CACZP,MAAOI,O,yCAKMI,GACbA,EAAUR,QAAUnB,KAAKkB,MAAMC,QACjCE,SAASC,OAASE,KAAKI,UAAU5B,KAAKkB,MAAMC,U,gCAIrC,IAAD,EACoBnB,KAAKkB,MAAzBC,EADA,EACAA,MAAOjB,EADP,EACOA,SACfF,KAAK0B,SAAS,CACZP,MAAM,GAAD,mBAAMA,GAAN,CAAa,CAAEN,GAAIb,KAAKa,GAAIG,KAAMd,KACvCA,SAAU,KAEZF,KAAKa,O,iCAGIA,GACTb,KAAK0B,SAAS,CACZP,MAAOnB,KAAKkB,MAAMC,MAAMU,QAAO,SAACf,GAAD,OAAUA,EAAKD,KAAOA,S,mCAI5Cf,GACXE,KAAK0B,SAAS,CACZxB,SAAUJ,EAAEgC,OAAOzB,U,+BAIb,IAAD,SACqBL,KAAKkB,MAAzBC,EADD,EACCA,MAAOjB,EADR,EACQA,SACf,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CACED,SAAUA,EACVD,QAASD,KAAKC,QACdF,aAAcC,KAAKD,gBAGvB,qCACA,yBAAKI,UAAU,QACZgB,EAAMY,KAAI,SAACjB,GAAD,OACT,kBAAC,EAAD,CAAMA,KAAMA,EAAMC,WAAY,EAAKA,sB,GAjE7BN,IAAMC,WCOJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SD2HpB,kBAAmBC,WAErBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9159fde9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass TodoItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.add = this.add.bind(this);\r\n    this.handle = this.handle.bind(this);\r\n  }\r\n\r\n  handle(e) {\r\n    const { handleChange } = this.props;\r\n    handleChange(e);\r\n  }\r\n\r\n  add() {\r\n    const { addTodo } = this.props;\r\n    addTodo();\r\n  }\r\n\r\n  render() {\r\n    const { todoText } = this.props;\r\n    return (\r\n      <div className=\"add-item\">\r\n        <input\r\n          type=\"text\"\r\n          value={todoText}\r\n          onChange={this.handle}\r\n          placeholder=\"Add Something\"\r\n        />\r\n        <button className=\"add-todo\" onClick={this.add}>\r\n          New\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\n\r\nclass Todo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.delete = this.delete.bind(this);\r\n  }\r\n\r\n  delete(id) {\r\n    const { todo, deleteTodo } = this.props;\r\n    deleteTodo(todo.id);\r\n  }\r\n\r\n  render() {\r\n    const { todo } = this.props;\r\n    return (\r\n      <div className=\"list-item\">\r\n        <div className=\"list-item__content\">{todo.text}</div>\r\n        <div className=\"list-item__state\">\r\n          <button className=\"delete\" onClick={this.delete}>\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport Todo from \"./Todo\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todos: [],\r\n      todoText: \"\",\r\n    };\r\n    this.id = 1;\r\n\r\n    this.addTodo = this.addTodo.bind(this);\r\n    this.deleteTodo = this.deleteTodo.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const todoData = document.cookie;\r\n    if (todoData) {\r\n      const oldTodos = JSON.parse(todoData);\r\n      this.setState({\r\n        todos: oldTodos,\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    if (prevState.todos !== this.state.todos) {\r\n      document.cookie = JSON.stringify(this.state.todos);\r\n    }\r\n  }\r\n\r\n  addTodo() {\r\n    const { todos, todoText } = this.state;\r\n    this.setState({\r\n      todos: [...todos, { id: this.id, text: todoText }],\r\n      todoText: \"\",\r\n    });\r\n    this.id++;\r\n  }\r\n\r\n  deleteTodo(id) {\r\n    this.setState({\r\n      todos: this.state.todos.filter((todo) => todo.id !== id),\r\n    });\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      todoText: e.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { todos, todoText } = this.state;\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"add\">\r\n          <TodoItem\r\n            todoText={todoText}\r\n            addTodo={this.addTodo}\r\n            handleChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <h2>Todo!</h2>\r\n        <div className=\"list\">\r\n          {todos.map((todo) => (\r\n            <Todo todo={todo} deleteTodo={this.deleteTodo} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                //config new\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                //config old\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    //判斷是否支援 serviceWorker\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}